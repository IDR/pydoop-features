#!/usr/bin/env python

import sys
import os
import argparse

from avro.datafile import DataFileReader
from avro.io import DatumReader
import numpy as np


def make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('img_file', metavar='IMG_FILE')
    return parser


# no schema needed for deserialization
def iterplanes(img_file):
    with open(img_file, 'rb') as f:
        reader = DataFileReader(f, DatumReader())
        for plane in reader:
            yield plane


def build_array(multiarray, x_idx, y_idx):
    if not multiarray['little_endian']:
        raise RuntimeError('big endian data not supported (yet)')
    dtype = getattr(np, multiarray['dtype'].lower())
    a = np.fromstring(multiarray['data'], dtype=dtype)
    return a.reshape(multiarray['shape'][x_idx], multiarray['shape'][y_idx])


def main(argv):
    parser = make_parser()
    args = parser.parse_args(argv)
    for p in iterplanes(args.img_file):
        do = p['dimension_order']
        offsets = p['pixel_data']['offsets']
        idx_map = dict((dim, i) for (i, dim) in enumerate(do))
        x, y, z, c, t = [offsets[idx_map[_]] for _ in 'XYZCT']
        print '%s {x=%d, y=%d, z=%d, c=%d, t=%d}' % (p['name'], x, y, z, c, t)
        a = build_array(p['pixel_data'], idx_map['X'], idx_map['Y'])
        out_fn = '%s-z%04d-c%04d-t%04d.npy' % (p['name'], z, c, t)
        np.save(out_fn, a)


if __name__ == '__main__':
    main(sys.argv[1:])
