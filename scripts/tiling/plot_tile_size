#!/usr/bin/env python

# BEGIN_COPYRIGHT
#
# Copyright (C) 2016-2017 Open Microscopy Environment:
#   - University of Dundee
#   - CRS4
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# END_COPYRIGHT

import sys
import csv
import argparse

import matplotlib.pyplot as plt


def get_data(fn):
    with open(fn) as f:
        data = {"shapes": [], "t": [], "err": []}
        reader = csv.DictReader(f, delimiter="\t")
        for r in reader:
            data["shapes"].append("%s x %s" % (r["W"], r["H"]))
            data["t"].append(float(r["ELAPSED_T"]))
            data["err"].append(float(r["ERROR"]))
    return data


def plot_data(data, img_fn):
    plt.close("all")
    fig, (ax1, ax2) = plt.subplots(2, sharex=True)
    # --
    xlabels = data["shapes"]
    x = range(len(xlabels))
    ax1.plot(x, data["t"])
    xmin, xmax, ymin, ymax = ax1.axis()
    ax1.axis((xmin, xmax, 0, ymax))
    ax1.set_xticks(x)
    ax1.set_xticklabels(xlabels)
    ax1.set_xlabel("tile shape")
    ax1.set_ylabel("total running time (s)")
    # --
    ax2.plot(x, data["err"])
    ax2.set_xticks(x)
    ax2.set_xticklabels(xlabels)
    ax2.set_xlabel("tile shape")
    ax2.set_ylabel("error")
    # --
    fig.savefig(img_fn, dpi=300)


def make_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("stats_fn", metavar="STATS_FILE",
                        help="stats file (from run_tile_size)")
    parser.add_argument("-o", "--out-fn", metavar="FILE", default="stats.png",
                        help="output filename")
    return parser


def main(argv):
    parser = make_parser()
    args = parser.parse_args(argv)
    plot_data(get_data(args.stats_fn), args.out_fn)


if __name__ == '__main__':
    main(sys.argv[1:])
