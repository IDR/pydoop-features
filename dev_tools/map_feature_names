#!/usr/bin/env python

"""\
(Re)generate the Avro IDL file for ouptut features and the map from
WND-CHARM feature names to (avro_array_name, index) tuples.

Also verifies several assumptions on the original feature names.
"""

import sys
import os
import re
import operator

import numpy as np
from pyfeatures.feature_calc import calc_features

REPO_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
AVRO_IDL_FN = os.path.join(REPO_ROOT, "src", "main", "avro", "featureset.avdl")
PY_FN = os.path.join(REPO_ROOT, "pyfeatures", "feature_names.py")
FEATURE_MAP_NAME = "FEATURE_NAMES"

PATTERN = re.compile(r"[ \(\)\[\]-]+")
AVRO_IDL_HEADER = """\
@namespace("it.crs4.features")
protocol FeatureSet {

  record Signatures {
    string version;
    string plane_tag;
    int w;
    int h;
    int x;
    int y;
"""
AVRO_IDL_FOOTER = """\
  }

}

// Local Variables|
// mode| java
// End|
""".replace("|", ":")  # avoid setting java mode on *this* file
AVRO_IDL_LINE = "    array<double> %s;\n"
GENERATED_NOTICE = "auto-generated by %s\n" % os.path.basename(sys.argv[0])


def get_random_img(w, h):
    dtype = np.uint8
    info = np.iinfo(dtype)
    return np.random.randint(
        info.min, info.max + 1, w * h
    ).astype(dtype).reshape(w, h)


def get_names_map(names):
    m = {}
    for n in names:
        parts = PATTERN.split(n)
        parts.pop()
        try:
            idx = int(parts.pop())
        except ValueError:
            raise ValueError("bad name format: %r" % (n,))
        m[n] = ('_'.join(_.lower() for _ in parts), idx)
    return m


def generate_py(names_map):
    with open(PY_FN, "w") as fo:
        print "writing to %r" % (fo.name,)
        fo.write("# %s\n" % GENERATED_NOTICE)
        fo.write("%s = {\n" % FEATURE_MAP_NAME)
        for k, v in sorted(names_map.iteritems(), key=operator.itemgetter(1)):
            fo.write("    %r:\n    %r,\n" % (k, v))
        fo.write("}\n")


def generate_avro(names_map):
    with open(AVRO_IDL_FN, "w") as fo:
        print "writing to %r" % (fo.name,)
        fo.write("// %s\n" % GENERATED_NOTICE)
        fo.write(AVRO_IDL_HEADER)
        for array_name in sorted(set(_[0] for _ in names_map.itervalues())):
            fo.write(AVRO_IDL_LINE % array_name)
        fo.write(AVRO_IDL_FOOTER)


def main():
    img = get_random_img(8, 8)
    print "computing features for random img"
    short_names = calc_features(img, "short", long=False).next().feature_names
    long_names = calc_features(img, "long", long=True).next().feature_names
    N_SHORT, N_LONG = len(short_names), len(long_names)
    short_names, long_names = set(short_names), set(long_names)
    assert len(short_names) == N_SHORT and len(long_names) == N_LONG
    assert short_names <= long_names
    names_map = get_names_map(long_names)
    assert len(set(names_map.itervalues())) == len(names_map)
    generate_py(names_map)
    generate_avro(names_map)


if __name__ == "__main__":
    main()
