#!/usr/bin/env python

import os
import subprocess as sp
import tempfile
from itertools import (
    izip,
    product,
)

from wndcharm.FeatureVector import FeatureVector

import pyfeatures.pyavroc_emu as pyavroc_emu
from pyfeatures.feature_names import FEATURE_NAMES


THIS_DIR = os.path.dirname(os.path.abspath(__file__))
IMG_FN = os.path.join(THIS_DIR, "37117_small.tif")
IMGND_STEM = 'test&pixelType=uint8&sizeX=16&sizeY=16&sizeC=3&sizeZ=4&sizeT=5'
IMGND_FN = os.path.join(THIS_DIR, IMGND_STEM + '.fake')


def run_serialize(img_fn, out_dir):
    args = ["pyfeatures", "serialize", "-o", out_dir, img_fn]
    sp.check_call(args)


def run_deserialize(avro_fn, out_dir, img=True):
    args = ["pyfeatures", "deserialize", "--img", avro_fn, out_dir]
    sp.check_call(args)


def run_feature_calc(avro_fn, out_dir, zs=None, cs=None, ts=None):
    args = ["pyfeatures", "calc", "-o", out_dir, avro_fn]
    if zs is not None:
        args.append("--zsubset=" + zs)
    if cs is not None:
        args.append("--csubset=" + cs)
    if ts is not None:
        args.append("--tsubset=" + ts)
    sp.check_call(args)


def check_features(img_fn, avro_out_fn, long=False):
    sigs = FeatureVector(source_filepath=img_fn, long=long)
    sigs.GenerateFeatures(write_to_disk=False)
    fmap = dict(izip(sigs.feature_names, sigs.values))
    with open(avro_out_fn) as f:
        records = [_ for _ in pyavroc_emu.AvroFileReader(f)]
    assert len(records) == 1
    rec = records[0]
    for fname, (vname, idx) in FEATURE_NAMES.iteritems():
        v = fmap.get(fname)
        if v is None:
            assert not long
            assert len(rec[vname]) == 0
        else:
            assert abs(rec[vname][idx] - v) <= 1e-7


def test_image():
    wd = tempfile.mkdtemp(prefix="pyfeatures_")
    print "working dir: %r" % (wd,)
    avro_input_dir = os.path.join(wd, "avro_in")
    avro_output_dir = os.path.join(wd, "avro_out")
    img_output_dir = os.path.join(wd, "planes")
    run_serialize(IMG_FN, avro_input_dir)
    basenames = os.listdir(avro_input_dir)
    assert len(basenames) > 0
    for bn in basenames:
        fn = os.path.join(avro_input_dir, bn)
        run_deserialize(fn, img_output_dir)  # for visual inspection
        run_feature_calc(fn, avro_output_dir)
        out_bn = "_features".join(os.path.splitext(bn))
        out_fn = os.path.join(avro_output_dir, out_bn)
        assert os.path.isfile(out_fn)
        check_features(IMG_FN, out_fn)


def czt_feature_map(avro_fn):
    m = {}
    with open(avro_fn) as f:
        for r in pyavroc_emu.AvroFileReader(f):
            k = (r['c'], r['z'], r['t'])
            assert k not in m
            m[k] = r
    return m


def test_subset():
    wd = tempfile.mkdtemp(prefix="pyfeatures_")
    print "working dir: %r" % (wd,)
    avro_input_dir = os.path.join(wd, "avro_in")
    avro_output_full = os.path.join(wd, "avro_calc_full")
    avro_output_subset1 = os.path.join(wd, "avro_calc_subset1")
    avro_output_subset2 = os.path.join(wd, "avro_calc_subset2")
    run_serialize(IMGND_FN, avro_input_dir)
    basenames = os.listdir(avro_input_dir)
    assert basenames == [IMGND_STEM + '_0.avro']
    bn = basenames[0]
    fn = os.path.join(avro_input_dir, bn)

    run_feature_calc(fn, avro_output_subset1, cs="2", zs="1", ts="3")
    run_feature_calc(fn, avro_output_subset2, cs="-1", zs="-3", ts="-2")
    run_feature_calc(fn, avro_output_full)

    out_bn = "_features".join(os.path.splitext(bn))
    subset1 = czt_feature_map(os.path.join(avro_output_subset1, out_bn))
    subset2 = czt_feature_map(os.path.join(avro_output_subset2, out_bn))
    full = czt_feature_map(os.path.join(avro_output_full, out_bn))

    assert sorted(full.keys()) == list(product(
        xrange(3), xrange(4), xrange(5)))
    for subset in (subset1, subset2):
        assert sorted(subset.keys()) == [(2, 1, 3)]
        assert subset[(2, 1, 3)] == full[(2, 1, 3)]


if __name__ == "__main__":
    test_image()
    test_subset()
